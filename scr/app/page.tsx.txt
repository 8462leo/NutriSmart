'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'
import { 
  User, 
  Calculator, 
  Target, 
  Utensils, 
  Activity, 
  Heart, 
  Zap, 
  CheckCircle,
  Download,
  Sparkles,
  TrendingUp,
  Apple,
  Droplets,
  Crown,
  Star,
  Check,
  X,
  ArrowLeft,
  Brain,
  BarChart3,
  FileText,
  Headphones
} from 'lucide-react'

interface PatientData {
  nome: string
  idade: number
  sexo: 'masculino' | 'feminino'
  altura_cm: number
  peso_kg: number
  nivel_atividade: string
  objetivo_principal: string
  restricoes: string[]
  preferencias: string[]
  condicoes_medicas: string[]
  meta_calorica: number
  quantidade_refeicoes: number
  estilo_alimentar: string
  plano_assinatura: 'Free' | 'Pro' | 'Expert'
}

interface DietPlan {
  nome: string
  foco: string
  calorias: number
  macros: {
    carboidratos: number
    proteinas: number
    gorduras: number
  }
  refeicoes: {
    nome: string
    horario: string
    alimentos: string[]
    calorias: number
  }[]
  observacoes: string[]
}

interface NutritionAnalysis {
  imc: number
  tmb: number
  gasto_calorico: number
  diagnostico: string
  pontos_fortes: string[]
  recomendacoes: string[]
  planos: DietPlan[]
  substituicoes: {
    categoria: string
    opcoes: string[]
  }[]
  suplementacao: {
    nome: string
    justificativa: string
  }[]
  dicas: string[]
  analise_avancada?: {
    metabolismo: string
    estrategias: string[]
    recomendacoes_profissionais: string[]
  }
}

type ViewMode = 'landing' | 'form' | 'loading' | 'results'

export default function NutriSmartAI() {
  const [view, setView] = useState<ViewMode>('landing')
  const [selectedPlan, setSelectedPlan] = useState<'Free' | 'Pro' | 'Expert'>('Free')
  const [patientData, setPatientData] = useState<PatientData>({
    nome: '',
    idade: 0,
    sexo: 'masculino',
    altura_cm: 0,
    peso_kg: 0,
    nivel_atividade: '',
    objetivo_principal: '',
    restricoes: [],
    preferencias: [],
    condicoes_medicas: [],
    meta_calorica: 0,
    quantidade_refeicoes: 6,
    estilo_alimentar: '',
    plano_assinatura: 'Free'
  })
  const [analysis, setAnalysis] = useState<NutritionAnalysis | null>(null)
  const [loadingProgress, setLoadingProgress] = useState(0)

  const plans = [
    {
      name: 'Free',
      price: 'R$0',
      period: '/mês',
      description: 'Ideal para começar',
      features: [
        '1 plano alimentar simples',
        'Sem histórico salvo',
        'Geração limitada (1 dieta por mês)',
        'Acesso básico às substituições'
      ],
      limitations: [
        'Não inclui IA avançada',
        'Sem personalização profunda',
        'Sem exportação PDF',
        'Sem suporte'
      ],
      color: 'from-gray-500 to-gray-600',
      popular: false
    },
    {
      name: 'Pro',
      price: 'R$39',
      period: '/mês',
      description: 'Para resultados consistentes',
      features: [
        '3 planos personalizados por paciente',
        'Geração ilimitada de cardápios',
        'Histórico e exportação PDF',
        'IA Nutricionista Avançada',
        'Tabela completa de substituições',
        'Análise de macronutrientes'
      ],
      limitations: [],
      color: 'from-emerald-500 to-teal-600',
      popular: true
    },
    {
      name: 'Expert',
      price: 'R$89',
      period: '/mês',
      description: 'Para profissionais da saúde',
      features: [
        'Todas as funções do Pro',
        'Análise de exames e macronutrientes detalhada',
        'Dashboard nutricional avançado',
        'Estratégias nutricionais profissionais',
        'Análise metabólica completa',
        'Suporte prioritário 24/7'
      ],
      limitations: [],
      color: 'from-purple-500 to-indigo-600',
      popular: false
    }
  ]

  const calculateIMC = (peso: number, altura: number) => {
    return peso / Math.pow(altura / 100, 2)
  }

  const calculateTMB = (peso: number, altura: number, idade: number, sexo: string) => {
    if (sexo === 'masculino') {
      return 88.362 + (13.397 * peso) + (4.799 * altura) - (5.677 * idade)
    } else {
      return 447.593 + (9.247 * peso) + (3.098 * altura) - (4.330 * idade)
    }
  }

  const generateDietPlans = async () => {
    setView('loading')
    setLoadingProgress(0)

    // Simular progresso de carregamento
    const progressInterval = setInterval(() => {
      setLoadingProgress(prev => {
        if (prev >= 95) {
          clearInterval(progressInterval)
          return 95
        }
        return prev + Math.random() * 15
      })
    }, 200)

    // Simular chamada para IA
    await new Promise(resolve => setTimeout(resolve, 4000))
    
    const imc = calculateIMC(patientData.peso_kg, patientData.altura_cm)
    const tmb = calculateTMB(patientData.peso_kg, patientData.altura_cm, patientData.idade, patientData.sexo)
    const gasto_calorico = tmb * 1.6 // Fator de atividade moderada

    // Gerar planos baseados no tipo de assinatura
    const getPlansBasedOnSubscription = () => {
      const basePlans = [
        {
          nome: 'Emagrecimento com Alta Saciedade',
          foco: 'Low Carb Leve',
          calorias: Math.round(gasto_calorico * 0.85),
          macros: { carboidratos: 30, proteinas: 35, gorduras: 35 },
          refeicoes: [
            {
              nome: 'Café da Manhã',
              horario: '07:00',
              alimentos: ['2 ovos mexidos', '1 fatia de abacate', '1 xícara de café sem açúcar'],
              calorias: 320
            },
            {
              nome: 'Lanche da Manhã',
              horario: '10:00',
              alimentos: ['1 iogurte grego natural', '1 colher de chia'],
              calorias: 150
            },
            {
              nome: 'Almoço',
              horario: '12:30',
              alimentos: ['150g peito de frango grelhado', 'Salada verde à vontade', '2 colheres de azeite'],
              calorias: 450
            },
            {
              nome: 'Lanche da Tarde',
              horario: '15:30',
              alimentos: ['1 punhado de castanhas', '1 maçã pequena'],
              calorias: 200
            },
            {
              nome: 'Jantar',
              horario: '19:00',
              alimentos: ['150g salmão grelhado', 'Brócolis refogado', '1 colher de azeite'],
              calorias: 400
            },
            {
              nome: 'Ceia',
              horario: '21:30',
              alimentos: ['1 xícara de chá de camomila', '2 castanhas do pará'],
              calorias: 80
            }
          ],
          observacoes: [
            'Alto teor de proteínas para saciedade',
            'Carboidratos complexos priorizados',
            'Gorduras boas para hormônios'
          ]
        }
      ]

      if (patientData.plano_assinatura === 'Free') {
        return [basePlans[0]] // Apenas 1 plano simples
      }

      // Para Pro e Expert, adicionar mais planos
      basePlans.push(
        {
          nome: 'Hipertrofia e Performance',
          foco: 'Ganho de Massa Muscular',
          calorias: Math.round(gasto_calorico * 1.15),
          macros: { carboidratos: 45, proteinas: 30, gorduras: 25 },
          refeicoes: [
            {
              nome: 'Pré-Treino',
              horario: '06:30',
              alimentos: ['1 banana', '1 colher de aveia', '1 xícara de café'],
              calorias: 200
            },
            {
              nome: 'Pós-Treino',
              horario: '08:30',
              alimentos: ['Whey protein 30g', '1 banana', '200ml leite'],
              calorias: 300
            },
            {
              nome: 'Café da Manhã',
              horario: '09:30',
              alimentos: ['3 ovos mexidos', '2 fatias de pão integral', '1 copo de suco natural'],
              calorias: 500
            },
            {
              nome: 'Almoço',
              horario: '12:30',
              alimentos: ['200g frango grelhado', '1 xícara de arroz integral', 'Legumes refogados'],
              calorias: 650
            },
            {
              nome: 'Lanche da Tarde',
              horario: '15:30',
              alimentos: ['1 iogurte com granola', '1 punhado de frutas secas'],
              calorias: 300
            },
            {
              nome: 'Jantar',
              horario: '19:00',
              alimentos: ['200g carne vermelha magra', 'Batata doce assada', 'Salada verde'],
              calorias: 600
            }
          ],
          observacoes: [
            'Timing nutricional otimizado para treino',
            'Alta densidade calórica',
            'Recuperação muscular priorizada'
          ]
        },
        {
          nome: 'Reeducação Alimentar Equilibrada',
          foco: 'Sustentabilidade e Variedade',
          calorias: Math.round(gasto_calorico),
          macros: { carboidratos: 50, proteinas: 25, gorduras: 25 },
          refeicoes: [
            {
              nome: 'Café da Manhã',
              horario: '07:30',
              alimentos: ['1 tapioca com queijo', '1 copo de suco natural', '1 fruta da estação'],
              calorias: 350
            },
            {
              nome: 'Lanche da Manhã',
              horario: '10:00',
              alimentos: ['1 iogurte natural', '1 colher de mel', 'Frutas vermelhas'],
              calorias: 180
            },
            {
              nome: 'Almoço',
              horario: '12:30',
              alimentos: ['Prato equilibrado: 1/2 proteína, 1/4 carboidrato, 1/4 vegetais', 'Temperos naturais'],
              calorias: 500
            },
            {
              nome: 'Lanche da Tarde',
              horario: '15:30',
              alimentos: ['Mix de oleaginosas', '1 fruta média'],
              calorias: 200
            },
            {
              nome: 'Jantar',
              horario: '19:00',
              alimentos: ['Sopa de legumes com proteína', '1 fatia de pão integral'],
              calorias: 400
            },
            {
              nome: 'Ceia (opcional)',
              horario: '21:00',
              alimentos: ['Chá relaxante', '2 biscoitos integrais'],
              calorias: 100
            }
          ],
          observacoes: [
            'Flexibilidade nas escolhas',
            'Educação nutricional aplicada',
            'Sustentável a longo prazo'
          ]
        }
      )

      return basePlans
    }

    const mockAnalysis: NutritionAnalysis = {
      imc: imc,
      tmb: tmb,
      gasto_calorico: gasto_calorico,
      diagnostico: imc < 18.5 ? 'Abaixo do peso ideal' : 
                   imc < 25 ? 'Peso ideal, metabolismo equilibrado' :
                   imc < 30 ? 'Leve sobrepeso, metabolismo acelerado recomendado' :
                   'Obesidade, necessário acompanhamento médico',
      pontos_fortes: [
        'Bom nível de atividade física declarado',
        'Preferências alimentares variadas',
        'Motivação clara para mudança'
      ],
      recomendacoes: [
        'Manter regularidade nas refeições',
        'Priorizar hidratação adequada',
        'Incluir exercícios de força'
      ],
      planos: getPlansBasedOnSubscription(),
      substituicoes: patientData.plano_assinatura === 'Free' ? [] : [
        {
          categoria: 'Proteínas',
          opcoes: ['Frango', 'Peixe', 'Ovos', 'Tofu', 'Leguminosas', 'Queijo cottage']
        },
        {
          categoria: 'Carboidratos',
          opcoes: ['Arroz integral', 'Quinoa', 'Batata doce', 'Aveia', 'Pão integral', 'Frutas']
        },
        {
          categoria: 'Gorduras Boas',
          opcoes: ['Abacate', 'Castanhas', 'Azeite', 'Coco', 'Sementes', 'Peixes gordos']
        },
        {
          categoria: 'Vegetais',
          opcoes: ['Folhas verdes', 'Brócolis', 'Cenoura', 'Abobrinha', 'Tomate', 'Pimentão']
        }
      ],
      suplementacao: patientData.plano_assinatura === 'Free' ? [] : [
        {
          nome: 'Whey Protein',
          justificativa: 'Complementar necessidades proteicas para hipertrofia'
        },
        {
          nome: 'Ômega 3',
          justificativa: 'Anti-inflamatório natural e saúde cardiovascular'
        },
        {
          nome: 'Vitamina D',
          justificativa: 'Deficiência comum, importante para imunidade'
        }
      ],
      dicas: [
        'Hidrate-se com pelo menos 2,5L de água por dia',
        'Mastigue devagar e saboreie cada refeição',
        'Prepare as refeições com antecedência',
        patientData.plano_assinatura !== 'Free' ? 'Tenha uma refeição livre controlada por semana' : 'Mantenha consistência na alimentação',
        'Durma 7-8 horas por noite para otimizar o metabolismo'
      ]
    }

    // Análise avançada apenas para Expert
    if (patientData.plano_assinatura === 'Expert') {
      mockAnalysis.analise_avancada = {
        metabolismo: `Baseado nos dados fornecidos, seu metabolismo apresenta características de ${imc < 25 ? 'eficiência energética normal' : 'resistência metabólica leve'}. A taxa metabólica basal de ${Math.round(tmb)} kcal indica um perfil metabólico ${tmb > 1800 ? 'acelerado' : 'moderado'}.`,
        estrategias: [
          'Implementar periodização nutricional com ciclos de 21 dias',
          'Utilizar janela de alimentação restrita (16:8) para otimização hormonal',
          'Aplicar estratégia de refeeds semanais para manutenção da leptina',
          'Monitorar biomarcadores através de exames trimestrais'
        ],
        recomendacoes_profissionais: [
          'Solicitar hemograma completo, perfil lipídico e glicemia de jejum',
          'Avaliar níveis de vitamina D, B12 e ferro sérico',
          'Considerar teste de intolerância alimentar se houver sintomas digestivos',
          'Acompanhar evolução com bioimpedância mensal'
        ]
      }
    }

    clearInterval(progressInterval)
    setLoadingProgress(100)
    
    setTimeout(() => {
      setAnalysis(mockAnalysis)
      setView('results')
    }, 500)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    generateDietPlans()
  }

  const resetToLanding = () => {
    setView('landing')
    setPatientData({
      nome: '',
      idade: 0,
      sexo: 'masculino',
      altura_cm: 0,
      peso_kg: 0,
      nivel_atividade: '',
      objetivo_principal: '',
      restricoes: [],
      preferencias: [],
      condicoes_medicas: [],
      meta_calorica: 0,
      quantidade_refeicoes: 6,
      estilo_alimentar: '',
      plano_assinatura: 'Free'
    })
    setAnalysis(null)
    setLoadingProgress(0)
  }

  const startWithPlan = (plan: 'Free' | 'Pro' | 'Expert') => {
    setSelectedPlan(plan)
    setPatientData({...patientData, plano_assinatura: plan})
    setView('form')
  }

  // Landing Page
  if (view === 'landing') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50">
        {/* Hero Section */}
        <div className="relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-emerald-600/10 to-teal-600/10"></div>
          <div className="relative max-w-7xl mx-auto px-4 py-16 sm:py-24">
            <div className="text-center space-y-8">
              <div className="flex items-center justify-center gap-3">
                <div className="w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <Brain className="w-8 h-8 text-white" />
                </div>
                <div>
                  <h1 className="text-5xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                    NutriSmart AI
                  </h1>
                  <p className="text-xl text-gray-600 mt-1">Inteligência Nutricional Sob Medida</p>
                </div>
              </div>
              
              <div className="max-w-3xl mx-auto space-y-6">
                <h2 className="text-3xl font-bold text-gray-900">
                  Revolucione sua alimentação com IA especializada em nutrição
                </h2>
                <p className="text-xl text-gray-600 leading-relaxed">
                  Nossa inteligência artificial nutricionista cria planos alimentares personalizados baseados em seus dados únicos, 
                  objetivos e preferências. Tecnologia de ponta para resultados reais e sustentáveis.
                </p>
              </div>

              <div className="flex flex-wrap justify-center gap-4 text-sm">
                <Badge variant="outline" className="px-4 py-2">
                  <Sparkles className="w-4 h-4 mr-2" />
                  IA Nutricionista Avançada
                </Badge>
                <Badge variant="outline" className="px-4 py-2">
                  <Target className="w-4 h-4 mr-2" />
                  Planos Personalizados
                </Badge>
                <Badge variant="outline" className="px-4 py-2">
                  <BarChart3 className="w-4 h-4 mr-2" />
                  Análise Metabólica
                </Badge>
                <Badge variant="outline" className="px-4 py-2">
                  <FileText className="w-4 h-4 mr-2" />
                  Relatórios Detalhados
                </Badge>
              </div>
            </div>
          </div>
        </div>

        {/* Plans Section */}
        <div className="max-w-7xl mx-auto px-4 py-16">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              Escolha o plano ideal para seus objetivos
            </h2>
            <p className="text-xl text-gray-600">
              Desde iniciantes até profissionais da saúde, temos a solução perfeita para você
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {plans.map((plan, index) => (
              <Card key={index} className={`relative ${plan.popular ? 'ring-2 ring-emerald-500 scale-105' : ''} hover:shadow-xl transition-all duration-300`}>
                {plan.popular && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <Badge className="bg-gradient-to-r from-emerald-500 to-teal-600 text-white px-4 py-1">
                      <Star className="w-3 h-3 mr-1" />
                      Mais Popular
                    </Badge>
                  </div>
                )}
                
                <CardHeader className="text-center pb-4">
                  <div className={`w-12 h-12 mx-auto mb-4 bg-gradient-to-r ${plan.color} rounded-xl flex items-center justify-center`}>
                    {plan.name === 'Free' && <User className="w-6 h-6 text-white" />}
                    {plan.name === 'Pro' && <Zap className="w-6 h-6 text-white" />}
                    {plan.name === 'Expert' && <Crown className="w-6 h-6 text-white" />}
                  </div>
                  <CardTitle className="text-2xl">{plan.name}</CardTitle>
                  <CardDescription className="text-base">{plan.description}</CardDescription>
                  <div className="mt-4">
                    <span className="text-4xl font-bold">{plan.price}</span>
                    <span className="text-gray-600">{plan.period}</span>
                  </div>
                </CardHeader>

                <CardContent className="space-y-6">
                  <div className="space-y-3">
                    <h4 className="font-semibold text-green-700">✓ Recursos Inclusos</h4>
                    {plan.features.map((feature, featureIndex) => (
                      <div key={featureIndex} className="flex items-start gap-2">
                        <Check className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                        <span className="text-sm">{feature}</span>
                      </div>
                    ))}
                  </div>

                  {plan.limitations.length > 0 && (
                    <div className="space-y-3">
                      <h4 className="font-semibold text-red-700">✗ Limitações</h4>
                      {plan.limitations.map((limitation, limitIndex) => (
                        <div key={limitIndex} className="flex items-start gap-2">
                          <X className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
                          <span className="text-sm text-gray-600">{limitation}</span>
                        </div>
                      ))}
                    </div>
                  )}

                  <Button 
                    onClick={() => startWithPlan(plan.name as 'Free' | 'Pro' | 'Expert')}
                    className={`w-full ${plan.name === 'Free' ? 'bg-gray-600 hover:bg-gray-700' : `bg-gradient-to-r ${plan.color} hover:opacity-90`} text-white`}
                  >
                    {plan.name === 'Free' ? 'Testar Grátis Agora' : `Assinar ${plan.name}`}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Features Section */}
        <div className="bg-white py-16">
          <div className="max-w-7xl mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Por que escolher o NutriSmart AI?
              </h2>
            </div>

            <div className="grid md:grid-cols-4 gap-8">
              <div className="text-center space-y-4">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center">
                  <Brain className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-semibold">IA Especializada</h3>
                <p className="text-gray-600">Nutricionista virtual com conhecimento clínico avançado e algoritmos de última geração</p>
              </div>

              <div className="text-center space-y-4">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center">
                  <Target className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-semibold">Personalização Total</h3>
                <p className="text-gray-600">Planos únicos baseados em seus dados, objetivos, restrições e preferências alimentares</p>
              </div>

              <div className="text-center space-y-4">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center">
                  <BarChart3 className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-semibold">Análise Completa</h3>
                <p className="text-gray-600">Cálculos precisos de IMC, TMB, macronutrientes e recomendações profissionais</p>
              </div>

              <div className="text-center space-y-4">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center">
                  <Headphones className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-semibold">Suporte Especializado</h3>
                <p className="text-gray-600">Acompanhamento contínuo e suporte técnico para maximizar seus resultados</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Loading Screen
  if (view === 'loading') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-teal-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="mx-auto mb-4 w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-full flex items-center justify-center">
              <Sparkles className="w-8 h-8 text-white animate-pulse" />
            </div>
            <CardTitle className="text-2xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
              {patientData.plano_assinatura === 'Expert' ? 'Análise Avançada em Progresso' : 'Gerando Suas Dietas'}
            </CardTitle>
            <CardDescription>
              {patientData.plano_assinatura === 'Expert' 
                ? 'Nossa IA está realizando análise metabólica profissional e criando estratégias nutricionais avançadas...'
                : patientData.plano_assinatura === 'Pro'
                ? 'IA nutricionista está analisando seus dados e criando 3 planos personalizados...'
                : 'Criando seu plano alimentar personalizado...'
              }
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Progress value={loadingProgress} className="w-full" />
            <div className="text-center text-sm text-gray-600">
              {loadingProgress < 25 && "Analisando dados pessoais..."}
              {loadingProgress >= 25 && loadingProgress < 50 && "Calculando necessidades nutricionais..."}
              {loadingProgress >= 50 && loadingProgress < 75 && `Criando ${patientData.plano_assinatura === 'Free' ? '1 plano' : '3 planos'} alimentares...`}
              {loadingProgress >= 75 && loadingProgress < 95 && (patientData.plano_assinatura === 'Expert' ? "Realizando análise metabólica avançada..." : "Gerando substituições e dicas...")}
              {loadingProgress >= 95 && "Finalizando relatório..."}
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Results Screen
  if (view === 'results' && analysis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-teal-50 p-4">
        <div className="max-w-6xl mx-auto space-y-6">
          {/* Header */}
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2">
              <div className="w-12 h-12 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-full flex items-center justify-center">
                <CheckCircle className="w-6 h-6 text-white" />
              </div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                Relatório Nutricional {patientData.plano_assinatura}
              </h1>
            </div>
            <p className="text-gray-600">Planos alimentares personalizados para {patientData.nome}</p>
            <div className="flex gap-2 justify-center">
              <Button onClick={resetToLanding} variant="outline">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Voltar ao Início
              </Button>
              {patientData.plano_assinatura !== 'Free' && (
                <Button className="bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700">
                  <Download className="w-4 h-4 mr-2" />
                  Exportar PDF
                </Button>
              )}
            </div>
          </div>

          {/* Análise do Paciente */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calculator className="w-5 h-5 text-emerald-600" />
                1. Análise do Paciente
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <Label className="text-sm font-medium text-gray-600">Indicadores</Label>
                  <div className="space-y-1">
                    <div className="flex justify-between">
                      <span>IMC:</span>
                      <Badge variant={analysis.imc < 25 ? "default" : "destructive"}>
                        {analysis.imc.toFixed(1)}
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>TMB:</span>
                      <span className="font-medium">{Math.round(analysis.tmb)} kcal</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Gasto Calórico:</span>
                      <span className="font-medium">{Math.round(analysis.gasto_calorico)} kcal</span>
                    </div>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label className="text-sm font-medium text-gray-600">Diagnóstico</Label>
                  <p className="text-sm">{analysis.diagnostico}</p>
                </div>
                <div className="space-y-2">
                  <Label className="text-sm font-medium text-gray-600">Pontos Fortes</Label>
                  <ul className="text-sm space-y-1">
                    {analysis.pontos_fortes.map((ponto, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <CheckCircle className="w-3 h-3 text-emerald-500 mt-0.5 flex-shrink-0" />
                        {ponto}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Análise Avançada - Apenas Expert */}
          {analysis.analise_avancada && (
            <Card className="border-purple-200 bg-purple-50/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Crown className="w-5 h-5 text-purple-600" />
                  Análise Metabólica Avançada (Expert)
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">Perfil Metabólico</h4>
                  <p className="text-sm text-gray-700">{analysis.analise_avancada.metabolismo}</p>
                </div>
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold mb-2">Estratégias Nutricionais</h4>
                    <ul className="text-sm space-y-1">
                      {analysis.analise_avancada.estrategias.map((estrategia, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <Target className="w-3 h-3 text-purple-500 mt-0.5 flex-shrink-0" />
                          {estrategia}
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-2">Recomendações Profissionais</h4>
                    <ul className="text-sm space-y-1">
                      {analysis.analise_avancada.recomendacoes_profissionais.map((rec, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <FileText className="w-3 h-3 text-purple-500 mt-0.5 flex-shrink-0" />
                          {rec}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Planos Alimentares */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Utensils className="w-5 h-5 text-emerald-600" />
                2. Planos Alimentares
                <Badge variant="outline">
                  {analysis.planos.length} {analysis.planos.length === 1 ? 'plano' : 'planos'}
                </Badge>
              </CardTitle>
              <CardDescription>
                {patientData.plano_assinatura === 'Free' 
                  ? 'Plano alimentar básico personalizado'
                  : 'Três abordagens diferentes para atingir seus objetivos'
                }
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="0" className="w-full">
                <TabsList className={`grid w-full ${analysis.planos.length === 1 ? 'grid-cols-1' : 'grid-cols-3'}`}>
                  {analysis.planos.map((plano, index) => (
                    <TabsTrigger key={index} value={index.toString()}>
                      {plano.nome}
                    </TabsTrigger>
                  ))}
                </TabsList>
                {analysis.planos.map((plano, index) => (
                  <TabsContent key={index} value={index.toString()} className="space-y-4">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <h4 className="font-semibold mb-2">Informações Gerais</h4>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span>Foco:</span>
                              <Badge>{plano.foco}</Badge>
                            </div>
                            <div className="flex justify-between">
                              <span>Calorias Totais:</span>
                              <span className="font-medium">{plano.calorias} kcal</span>
                            </div>
                          </div>
                        </div>
                        <div>
                          <h4 className="font-semibold mb-2">Macronutrientes</h4>
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-blue-500 rounded"></div>
                              <span className="text-sm">Carboidratos: {plano.macros.carboidratos}%</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-red-500 rounded"></div>
                              <span className="text-sm">Proteínas: {plano.macros.proteinas}%</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-yellow-500 rounded"></div>
                              <span className="text-sm">Gorduras: {plano.macros.gorduras}%</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div>
                        <h4 className="font-semibold mb-2">Observações Nutricionais</h4>
                        <ul className="text-sm space-y-1">
                          {plano.observacoes.map((obs, obsIndex) => (
                            <li key={obsIndex} className="flex items-start gap-2">
                              <Target className="w-3 h-3 text-emerald-500 mt-0.5 flex-shrink-0" />
                              {obs}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                    <Separator />
                    <div>
                      <h4 className="font-semibold mb-3">Cardápio Detalhado</h4>
                      <div className="grid gap-3">
                        {plano.refeicoes.map((refeicao, refIndex) => (
                          <Card key={refIndex} className="p-4">
                            <div className="flex justify-between items-start mb-2">
                              <div>
                                <h5 className="font-medium">{refeicao.nome}</h5>
                                <p className="text-sm text-gray-600">{refeicao.horario}</p>
                              </div>
                              <Badge variant="outline">{refeicao.calorias} kcal</Badge>
                            </div>
                            <ul className="text-sm space-y-1">
                              {refeicao.alimentos.map((alimento, alIndex) => (
                                <li key={alIndex} className="flex items-center gap-2">
                                  <Apple className="w-3 h-3 text-emerald-500" />
                                  {alimento}
                                </li>
                              ))}
                            </ul>
                          </Card>
                        ))}
                      </div>
                    </div>
                  </TabsContent>
                ))}
              </Tabs>
            </CardContent>
          </Card>

          {/* Substituições e Suplementação - Apenas Pro e Expert */}
          {patientData.plano_assinatura !== 'Free' && (
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-emerald-600" />
                    3. Substituições Alimentares
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysis.substituicoes.map((categoria, index) => (
                      <div key={index}>
                        <h4 className="font-medium mb-2">{categoria.categoria}</h4>
                        <div className="flex flex-wrap gap-1">
                          {categoria.opcoes.map((opcao, opcaoIndex) => (
                            <Badge key={opcaoIndex} variant="outline" className="text-xs">
                              {opcao}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Zap className="w-5 h-5 text-emerald-600" />
                    5. Suplementação Sugerida
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {analysis.suplementacao.map((supl, index) => (
                      <div key={index} className="p-3 bg-gray-50 rounded-lg">
                        <h4 className="font-medium">{supl.nome}</h4>
                        <p className="text-sm text-gray-600 mt-1">{supl.justificativa}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Dicas Finais */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Heart className="w-5 h-5 text-emerald-600" />
                4. Dicas e Observações
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 gap-4">
                {analysis.dicas.map((dica, index) => (
                  <div key={index} className="flex items-start gap-3 p-3 bg-emerald-50 rounded-lg">
                    <Droplets className="w-5 h-5 text-emerald-600 mt-0.5 flex-shrink-0" />
                    <p className="text-sm">{dica}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  // Form Screen
  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-teal-50 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-2">
            <Button onClick={resetToLanding} variant="outline" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Voltar
            </Button>
            <div className="flex items-center gap-2">
              <div className="w-12 h-12 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-full flex items-center justify-center">
                <Utensils className="w-6 h-6 text-white" />
              </div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                NutriSmart AI
              </h1>
            </div>
          </div>
          <div className="flex items-center justify-center gap-2">
            <Badge className={`${selectedPlan === 'Free' ? 'bg-gray-600' : selectedPlan === 'Pro' ? 'bg-emerald-600' : 'bg-purple-600'}`}>
              Plano {selectedPlan}
            </Badge>
            <p className="text-xl text-gray-600">Gerador Inteligente de Dietas Personalizadas</p>
          </div>
        </div>

        {/* Formulário */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="w-5 h-5 text-emerald-600" />
              Dados do Paciente
            </CardTitle>
            <CardDescription>
              Preencha as informações abaixo para gerar {selectedPlan === 'Free' ? '1 plano alimentar' : '3 planos alimentares'} personalizado{selectedPlan === 'Free' ? '' : 's'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Dados Pessoais */}
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="nome">Nome Completo</Label>
                  <Input
                    id="nome"
                    value={patientData.nome}
                    onChange={(e) => setPatientData({...patientData, nome: e.target.value})}
                    placeholder="Digite seu nome"
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="idade">Idade</Label>
                  <Input
                    id="idade"
                    type="number"
                    value={patientData.idade || ''}
                    onChange={(e) => setPatientData({...patientData, idade: parseInt(e.target.value) || 0})}
                    placeholder="Ex: 28"
                    required
                  />
                </div>
              </div>

              <div className="grid md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="sexo">Sexo</Label>
                  <Select value={patientData.sexo} onValueChange={(value: 'masculino' | 'feminino') => setPatientData({...patientData, sexo: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="masculino">Masculino</SelectItem>
                      <SelectItem value="feminino">Feminino</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="altura">Altura (cm)</Label>
                  <Input
                    id="altura"
                    type="number"
                    value={patientData.altura_cm || ''}
                    onChange={(e) => setPatientData({...patientData, altura_cm: parseInt(e.target.value) || 0})}
                    placeholder="Ex: 178"
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="peso">Peso (kg)</Label>
                  <Input
                    id="peso"
                    type="number"
                    value={patientData.peso_kg || ''}
                    onChange={(e) => setPatientData({...patientData, peso_kg: parseFloat(e.target.value) || 0})}
                    placeholder="Ex: 82"
                    required
                  />
                </div>
              </div>

              {/* Objetivos e Atividade */}
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="atividade">Nível de Atividade</Label>
                  <Select value={patientData.nivel_atividade} onValueChange={(value) => setPatientData({...patientData, nivel_atividade: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione seu nível" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="sedentario">Sedentário</SelectItem>
                      <SelectItem value="leve">Leve (1-3x/semana)</SelectItem>
                      <SelectItem value="moderado">Moderado (3-5x/semana)</SelectItem>
                      <SelectItem value="intenso">Intenso (6-7x/semana)</SelectItem>
                      <SelectItem value="muito_intenso">Muito Intenso (2x/dia)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="objetivo">Objetivo Principal</Label>
                  <Select value={patientData.objetivo_principal} onValueChange={(value) => setPatientData({...patientData, objetivo_principal: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione seu objetivo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="emagrecimento">Emagrecimento</SelectItem>
                      <SelectItem value="hipertrofia">Hipertrofia</SelectItem>
                      <SelectItem value="manutencao">Manutenção</SelectItem>
                      <SelectItem value="performance">Performance Esportiva</SelectItem>
                      <SelectItem value="reeducacao">Reeducação Alimentar</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Preferências e Restrições */}
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="preferencias">Preferências Alimentares</Label>
                  <Textarea
                    id="preferencias"
                    value={patientData.preferencias.join(', ')}
                    onChange={(e) => setPatientData({...patientData, preferencias: e.target.value.split(', ').filter(p => p.trim())})}
                    placeholder="Ex: frango, arroz integral, ovos, banana, salmão..."
                    rows={2}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="restricoes">Restrições Alimentares</Label>
                  <Textarea
                    id="restricoes"
                    value={patientData.restricoes.join(', ')}
                    onChange={(e) => setPatientData({...patientData, restricoes: e.target.value.split(', ').filter(r => r.trim())})}
                    placeholder="Ex: lactose, glúten, amendoim..."
                    rows={2}
                  />
                </div>
              </div>

              {/* Configurações Avançadas */}
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="refeicoes">Quantidade de Refeições</Label>
                  <Select value={patientData.quantidade_refeicoes.toString()} onValueChange={(value) => setPatientData({...patientData, quantidade_refeicoes: parseInt(value)})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="3">3 refeições</SelectItem>
                      <SelectItem value="4">4 refeições</SelectItem>
                      <SelectItem value="5">5 refeições</SelectItem>
                      <SelectItem value="6">6 refeições</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="estilo">Estilo Alimentar</Label>
                  <Select value={patientData.estilo_alimentar} onValueChange={(value) => setPatientData({...patientData, estilo_alimentar: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o estilo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="flexivel">Flexível</SelectItem>
                      <SelectItem value="vegetariano">Vegetariano</SelectItem>
                      <SelectItem value="vegano">Vegano</SelectItem>
                      <SelectItem value="low_carb">Low Carb</SelectItem>
                      <SelectItem value="cetogenico">Cetogênico</SelectItem>
                      <SelectItem value="mediterraneo">Mediterrâneo</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Button 
                type="submit" 
                className="w-full bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white py-3 text-lg"
                disabled={!patientData.nome || !patientData.idade || !patientData.altura_cm || !patientData.peso_kg}
              >
                <Sparkles className="w-5 h-5 mr-2" />
                Gerar {selectedPlan === 'Free' ? 'Plano Alimentar' : 'Planos Alimentares'} com IA
              </Button>
            </form>
          </CardContent>
        </Card>

        {/* Features do Plano Selecionado */}
        <div className="grid md:grid-cols-3 gap-4">
          <Card className="text-center p-6">
            <Activity className="w-8 h-8 text-emerald-600 mx-auto mb-3" />
            <h3 className="font-semibold mb-2">Análise Completa</h3>
            <p className="text-sm text-gray-600">IMC, TMB e gasto calórico calculados automaticamente</p>
          </Card>
          <Card className="text-center p-6">
            <Target className="w-8 h-8 text-emerald-600 mx-auto mb-3" />
            <h3 className="font-semibold mb-2">{selectedPlan === 'Free' ? '1 Plano' : '3 Planos Diferentes'}</h3>
            <p className="text-sm text-gray-600">
              {selectedPlan === 'Free' 
                ? 'Plano básico personalizado' 
                : 'Emagrecimento, hipertrofia e reeducação alimentar'
              }
            </p>
          </Card>
          <Card className="text-center p-6">
            <Zap className="w-8 h-8 text-emerald-600 mx-auto mb-3" />
            <h3 className="font-semibold mb-2">IA {selectedPlan === 'Expert' ? 'Profissional' : 'Especializada'}</h3>
            <p className="text-sm text-gray-600">
              {selectedPlan === 'Expert' 
                ? 'Análise metabólica avançada e estratégias profissionais'
                : 'Nutricionista virtual com conhecimento clínico'
              }
            </p>
          </Card>
        </div>
      </div>
    </div>
  )
}